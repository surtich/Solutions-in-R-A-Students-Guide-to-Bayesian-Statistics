---
title: "Chapter 12 Problem Sets"
format: html
editor: visual
warning: false
---

```{r}
#| echo: false
#| warning: false
#| output: false
library(tidyverse)
library(gt)
library(latex2exp)
library(RColorBrewer)
```

## Problem 12.1 A fairground game

At a fairground a man advertises a gambling game that allows participants the chance to win a money prize if they pay an entrance fee. The game sequence goes like this:

-   You pay $£X$.
-   The man flips a fair coin (with an equal chance of the coin landing heads or tails up).
-   If the coin lands tails up, the game ends and you walk away with nothing.
-   If the coin lands heads up, he flips the coin a further two times and you receive the total number of heads across these latter two flips, $H$. So if the coin lands heads up twice, you receive $£2$; if once, you receive $£1$; if zero, you receive $£0$.
-   Your winnings are given by $£(H - X)$.

# Problem 12.1.1

Calculate the expected value of your winnings W if you participate, and hence determine the fair price of the game.

::: {style="color:blue"}
$$
\mathbb{E}[W] = 0 \times \frac{1}{2} + \frac{1}{2}\times(2 \times \frac{1}{4} + 1 \times \frac{1} {2}) - X \\

\text{fair game} \implies \mathbb{E}[W] = £0 \implies X = £0.5
$$
:::

### Problem 12.1.2

Create an R function that simulates a single run of the game, and use this to estimate the expected value of your winnings.

```{r}
X <- .5
theta <- .5
mean(replicate(10000, {
  ifelse(rbinom(1,1, theta),sum(rbinom(2,1, theta)),0) - X
}))
```

Problem 12.1.3 Suppose that you pay $£1$ for each game, and start with $£10$ in your pocket. By using your previously created function, or otherwise, determine the expected number of games you can play before going broke.

```{r}
X <- 1
Y <- 10

game <- function(X, Y) {
  iter <- 0
  while (Y >= X) {
    iter <- iter + 1
    Y <- Y + ifelse(rbinom(1,1, theta),sum(rbinom(2,1, theta)),0) - X
  }
  iter
}

round(mean(replicate(1000, {
  game(X, Y)
})), 0)
```

### Problem 12.1.4

Suppose you start with $£10$, and play the game $100$ times (stopping only if your wealth is below the price of entry), each time paying $£0.49$. You want to insure against the risk of losing all your wealth. What is the fair price to pay for such an insurance scheme?

```{r}
X <- .49
Y <- 10
times <- 100

game <- function(X, Y, times) {
  iter <- 0
  while (Y >= X & iter < times) {
    iter <- iter + 1
    Y <- Y + ifelse(rbinom(1,1, theta),sum(rbinom(2,1, theta)),0) - X
  }
  Y
}

Y*mean(replicate(1000, {
  game(X, Y, times)
}) < X) 
```

## Problem 12.2 Independent sampling

An analysis results in a posterior with the following probability density function:

$$
f(x) = \begin{cases} 
\frac{1}{1.33485} \frac{e^{-x^2/2}}{\sqrt{2\pi}}, & \text{if } x < 0.9735, \\
0.186056, & \text{if } 0.9735 \leq x \leq 5, \\
0, & \text{otherwise.}
\end{cases}
$$

### Problem 12.2.1

Verify that this is a valid PDF. (Hint: see R’s numerical integration function.)

```{r}
fPDF <- function(X){
  y <- ifelse(X < 0.9735, (1 / 1.33485) * (1 / sqrt(2 * pi)) * exp(-X ^ 2 / 2),
    ifelse(X <= 5, 0.186056, 0))
  return(y)
}
integrate(fPDF,0,8)
```

### Problem 12.2.2

Using independent sampling, estimate the mean and variance of this distribution.

```{r}
fReject <- function(N){
  count <- 1
  lSamples <- vector(length=N)
  while(count <= N){
    X <- runif(1, 0, 5)
    Y <- runif(1, 0, (1 / 1.335) * (1 / sqrt(2 * pi)))
    if(Y < fPDF(X)){
      lSamples[count] <- X
      count <- count + 1
    }
  }
  return(lSamples)
}
mean(fReject(10000), 100)
var(fReject(10000))
```

```{r}
fIntegrator <- function(X){
  return(integrate(fPDF, 0, X)[[1]])
}
lCDF <- sapply(seq(0, 5, 0.1), fIntegrator)
fICDF <- approxfun(lCDF, seq(0, 5, 0.1))
fInverseTransform <- function(N){
  lCDF <- runif(N, 0, 1)
  return(sapply(lCDF, fICDF))
}
mean(fInverseTransform(100000))
var(fInverseTransform(100000))
```

### Problem 12.2.3

Construct uncertainty intervals around your estimates of the mean.

```{r}
quantile(replicate(1000, {
  mean(fInverseTransform(1000))
}), c(.1,.9))
```

### Problem 12.2.4

Verify your previous answer by calculating the mean and variance of this distribution.

```{r}
(aMean <- integrate(function(x) x * fPDF(x), 0, 5)[[1]])
(aVar <- integrate(function(x) x ^ 2 * fPDF(x), 0, 5)[[1]] - aMean ^ 2)
```

### Problem 12.2.6

Using the above method, where $g$ is the continuous uniform distribution between $0$ and $5$, find an estimate of the mean.

```{r}
fImportance <- function(N){
  lX <- runif(N, 0, 5)
  lF <- sapply(lX, fPDF)
  lG <- rep(1 / 5, N)
  lRatio <- lX * lF / lG
  mean(lRatio)
}
fImportance(10000)
```

## Problem 12.3 Integration by sampling

### Problem 12.3.1

$$
\int_{-\infty}^{\infty} \frac{x^6}{\sqrt{2\pi}} \exp\left( -\frac{x^2}{2} \right) \, dx
$$ ::: {style="color:blue"} TODO ::: \## Problem 12.4 Markovian coin Consider a type of coin for which the result of the next throw (heads or tails) can depend on the result of the current throw. In particular, if a heads is thrown then the probability of obtaining a heads on the next throw is $\frac{1}{2} + \epsilon$ ; if instead a tails is thrown then the probability of obtaining a tails on the next throw is $\frac{1}{2} + \epsilon$ . To start, we assume $0 ≤ \epsilon ≤ \frac{1}{2}$ . The random variable $X$ takes the value $0$ if the coin lands tails up or $1$ if it lands heads up on a given throw.

### Problem 12.4.2

Computationally estimate the mean of the coin by simulating 10, 20 and 100 throws for $\epsilon = 0$.

```{r}
epsilon = 0
theta = .5 + epsilon

simulate <- function(throws, theta, epsilon) {
  heads <- 0
  for (throw in 1:throws) {
    head <- rbinom(1,1,theta)
    heads <- heads + head
    theta <- theta + ifelse(head,epsilon,-epsilon)
    if (theta < 0) {
      theta <- 0
    } else if (theta > 1) {
      theta <- 1
    }
  }
  heads
}

data.frame(throws=c(10, 20, 100)) |>
  rowwise() |>
  mutate(heads = list(replicate(1000, simulate(throws, theta, epsilon)))) |>
  unnest(heads) |>
  mutate(mean = heads / throws) |>
  ggplot() +
  geom_histogram(aes(x=mean),binwidth = .1,  boundary = 0, fill = "orange", alpha=.6, color="black") +
  facet_wrap(vars(throws), labeller = labeller(throws = function(value) {
    return(paste0("n=", value))
  })) +
  theme_classic() +
  scale_x_continuous(breaks = seq(0,1,.2), limits = c(0,1), minor_breaks = seq(0,1,.1)) + 
  guides(x = guide_axis(minor.ticks = TRUE)) +
  theme(
    strip.background = element_blank()
  ) +
  labs(
    x="estimate of mean",
    y="frequency"
  )
```

### Problem 12.4.3

As $\epsilon$ increases, how does the error in estimating the mean change, and why?

```{r}
expand.grid(throws=c(10, 20, 100), epsilon=seq(0,.5,.05)) |>
  rowwise() |>
  mutate(heads = list(replicate(100, simulate(throws, theta, epsilon)))) |>
  unnest(heads) |>
  mutate(mean = heads / throws) |>
  group_by(throws, epsilon) |>
  summarize(average_error = sd(mean), .groups = "drop") |>
  #mutate(average_error = average_error/sqrt(throws)) |>
  ggplot(aes(x=epsilon, y=average_error, color=factor(throws))) +
  geom_point() +
  geom_line() +
  theme_classic()
```
